openapi: 3.0.0
info:
  title: Documentation for GoTo api
  version: 0.0.1
servers:
- url: http://localhost:8080
  description: Dev server
paths:
  /api/v1/login:
    post:
      summary: Logs in and returns the authentication  cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []    # no authentication
      responses:
        '204':
          description: logged in
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionId=abcde12345;
        '401':
          description: access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/signup:
    post:
      summary: Signs up and returns the authentication cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      security: []    # no authentication
      responses:
        '204':
          description: Created a new account
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionId=abcde12345;
        '401':
          description: sign up error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Invalid fields in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/logout:
    delete:
      summary: Logs out by deleting sessionId cookie
      responses:
        '204':
          description: Ok
          headers:
            Set-Cookie:
              schema:
                type: string
  /api/v1/places:
    get:
      summary: Returns list of places
      security: []    # no authentication
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceMap'
  # /api/v1/places/{placeId}:
  #   get:
  #     summary: Get a place by id
  #     security: []    # no authentication
  #     parameters:
  #       - in: path
  #         name: placeId
  #         schema:
  #           type: integer
  #         required: true
  #         description: Numeric id of the place to get
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Place'
  #       '404':
  #         description: Cant find a place with id = {placeId}
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  /api/v1/auth:
    get:
      summary: Checks if you have valid sessionId
      security:
        - cookieAuth: []
      responses:
        '204':
          description: You have valid sessionId
        '401':
          description: You dont have valid sessionId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/user:
    get:
      summary: Returns data of currently authotized user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User is unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Changes data of logged in user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{userId}:
    get:
      summary: Returns data of user with id = {userId}
      security: []    # no authentication
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Integer userId of the user to get data for
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanUser'
        '404':
          description: Couldnt find user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/avatar:
    post:
      summary: uploads new avatar and sets user avatarUrl to it
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/octet-stream:
            # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - avatarUrl
                properties:
                  avatarUrl:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'





  # /api/v1/users/{userId}/reviews:
  #   get:
  #     summary: Returns all reviews from user
  #     security: []    # no authentication
  #     parameters:
  #       - in: path
  #         name: userId
  #         schema:
  #           type: integer
  #         required: true
  #         description: Integer userId of the user to get reviews from
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ReviewMap'
  #       '404':
  #         description: Couldnt find user
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  /api/v1/places/{placeId}/reviews:
    get:
      summary: Returns all reviews for place
      security: []    # no authentication
      parameters:
        - in: path
          name: placeId
          schema:
            type: integer
          required: true
          description: Numeric id the place to get reviews for
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsWithAuthors'
        '404':
          description: Couldnt find place
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/reviews/{reviewId}:
    # get:
    #   summary: Returns a review with id = reviewId
    #   security: []    # no authentication
    #   parameters:
    #     - in: path
    #       name: reviewId
    #       schema:
    #         type: integer
    #       required: true
    #       description: Numeric id the review to get
    #   responses:
    #     '200':
    #       description: Success
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Review'
    #     '404':
    #       description: Couldnt find review
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Deletes a review
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: reviewId
          schema:
            type: integer
          required: true
          description: Numeric id the review to delete
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Couldnt find review
  /api/v1/review:
    post:
      summary: Adds a review
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        # '400':
        #   description: Contents of request are wrong
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/trips/{tripId}:
    get:
      summary: get a trip by {id}
      security: []
      parameters:
        - in: path
          name: tripId
          schema:
            type: integer
          required: true
          description: Numeric id of the trip to get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '401':
          description: Trip is private and you dont have the rights to view it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Couldnt find a trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: change a trip with {id}
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: tripId
          schema:
            type: integer
          required: true
          description: Numeric id of the trip to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTripRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '401':
          description: Trip is private and you dont have the rights to change it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Couldnt find a trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: delete a trip with {id}
      security:
        - cookieAuth: []
      parameters:
      - in: path
        name: tripId
        schema:
          type: integer
        required: true
        description: Numeric id of the trip to get
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Couldnt find a trip
  # /api/v1/{userId}/trips:
  #   get:
  #     summary: Returns trips of a user with userId
  #     security: []    # no authentication
  #     parameters:
  #       - in: path
  #         name: userId
  #         schema:
  #           type: string
  #         required: true
  #         description: Integer id of a user to get trips from
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/TripMap'
  #       '404':
  #         description: User doesnt exist
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  /api/v1/trips:
    get:
      summary: Returns trips of logged in user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripMap'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User doesnt exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/trip:
    post:
      summary: Post a trip
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTripRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Contents of request are wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  schemas:
    LoginRequest:
      type: object
      required:  # List the required properties here
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])"
    User:
      type: object
      required:
        - id
        - name
        - email
        - birth_date
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          description: Используем для авторизации
          type: string
        birth_date:
          type: string
          example: "2017-01-01"
          format: date
        about:
          type: string
        avatarUrl:
          type: string
    PatchUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          description: Используем для авторизации
          type: string
        birth_date:
          type: string
          example: "2017-01-01"
          format: date
        about:
          type: string
    CleanUser:
      type: object
      required:
        - id
        - name
        - birth_date
      properties:
        id:
          type: integer
        name:
          type: string
        about:
          type: string
        birth_date:
          type: string
          example: "2017-01-01"
          format: date
        avatarUrl:
          type: string
    CleanUserMap:
      type: object
      properties:
        CleanUserMapBody:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CleanUser'
    SignupRequest:
      type: object
      required:  # List the required properties here
        - name
        - email
        - password
        - birth_date
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])"
        birth_date:
          type: string
          example: "2017-01-01"
          format: date

    Place:
      type: object
      required:
        - id
        - name
        - description
        - rating
        - cost
        - adress
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        rating:
          type: number
        cost:
          type: string
        adress:
          type: string
        phone_number:
          type: string
        review_count:
          type: integer
        web-site:
          type: string
        email:
          type: string
        open_hour:
          type: string
        close_hour:
          type: string
        imageUrl:
          type: string
    PlaceMap:
      type: object
      properties:
        placeMapBody:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Place'
    Review:
      type: object
      required:
        - id
        - user_id
        - place_id
        - rating
      properties:
        id:
          type: integer
        user_id:
          type: integer
        place_id:
          type: integer
        text:
          type: string
        rating:
          type: integer
        creation_date:
            type: string
            description: RFC3339 Datetime to set
            format: date-time
            example: "2021-06-20T01:02:03+00:00"
    ReviewMap:
      type: object
      properties:
        reviewMapBody:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Review'
    AddReviewRequest:
      type: object
      required:  # List the required properties here
        - place_id
        - rating
      properties:
        place_id:
          type: integer
        text:
          type: string
        rating:
          type: integer
    Trip:
      required:
        - id
        - user_id
        - name
        - publicity
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        publicity:
          type: string
          example: public or private
        description:
          type: string
        places_in_trip:
          type: object
          additionalProperties:
            type: object
            required:
              - place
              - first_date
            properties:
              place:
                $ref: '#/components/schemas/Place'
              first_date:
                type: string
                example: "2017-01-01"
                format: date
              last_date:
                type: string
                example: "2017-01-02"
                format: date
    PatchTripRequest:
      type: object
      properties:
        name:
          type: string
        publicity:
          type: string
          example: public or private
        description:
          type: string
        places_in_trip:
          type: object
          additionalProperties:
            type: object
            required:  # List the required properties here
              - place_id
            properties:
              place_id:
                type: integer
              first_date:
                type: string
                example: "2017-01-01"
                format: date
              last_date:
                type: string
                example: "2017-01-02"
                format: date
    AddTripRequest:
      type: object
      required:  # List the required properties here
        - name
      properties:
        name:
          type: string
        publicity:
          type: string
          example: public or private
        description:
          type: string
        places_in_trip:
          type: object
          additionalProperties:
            type: object
            required:  # List the required properties here
              - place_id
            properties:
              place_id:
                type: integer
              first_date:
                type: string
                example: "2017-01-01"
                format: date
              last_date:
                type: string
                example: "2017-01-02"
                format: date
    TripMap:
      type: object
      properties:
        tripMapBody:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Trip'
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    CreatePlaceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        rating:
          type: number
        cost:
          type: string
        imageUrl:
          type: string
    ReviewsWithAuthors:
      type: object
      properties:
        reviews:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Review'
        authors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CleanUser'





  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId


security:
  - cookieAuth: []
